translation_unit -> external_declaration | translation_unit external_declaration
cast_expression -> unary_expression | '(' type_name ')' cast_expression
init_declarator -> declarator = initializer | declarator
enumeration_constant -> Identifier
enumerator_list -> enumerator | enumerator_list , enumerator
logical_and_expression -> inclusive_or_expression | logical_and_expression && inclusive_or_expression
parameter_type_list -> parameter_list , ... | parameter_list
designator_list -> designator | designator_list designator
designation -> designator_list =
shift_expression -> additive_expression | shift_expression << additive_expression | shift_expression >> additive_expression
type_specifier -> void | char | short | int | long | float | double | signed | unsigned | _Bool | _Complex | _Imaginary | atomic_type_specifier | struct_or_union_specifier | enum_specifier | Identifier
function_definition -> declaration_specifiers declarator declaration_list compound_statement | declaration_specifiers declarator compound_statement
iteration_statement -> while '(' expression ')' statement | do statement while '(' expression ')' ; | for '(' expression_statement expression_statement ')' statement | for '(' expression_statement expression_statement expression ')' statement | for '(' declaration expression_statement ')' statement | for '(' declaration expression_statement expression ')' statement
declaration_specifiers -> storage_class_specifier declaration_specifiers | storage_class_specifier | type_specifier declaration_specifiers | type_specifier | type_qualifier declaration_specifiers | type_qualifier | function_specifier declaration_specifiers | function_specifier | alignment_specifier declaration_specifiers | alignment_specifier
struct_or_union -> struct | union
struct_declarator -> : constant_expression | declarator : constant_expression | declarator
type_name -> specifier_qualifier_list abstract_declarator | specifier_qualifier_list
type_qualifier -> const | restrict | volatile | _Atomic
StaticAssertDeclaration -> _Static_assert '(' constant_expression , StringLiteral ')' ;
declaration_list -> declaration | declaration_list declaration
enum_specifier -> enum { enumerator_list } | enum { enumerator_list , } | enum Identifier { enumerator_list } | enum Identifier { enumerator_list , } | enum Identifier
generic_association -> type_name : assignment_expression
identifier_list -> Identifier | identifier_list , Identifier
designator -> [ constant_expression ] | . Identifier
relational_expression -> shift_expression | relational_expression < shift_expression | relational_expression > shift_expression | relational_expression <= shift_expression | relational_expression >= shift_expression
inclusive_or_expression -> exclusive_or_expression | inclusive_or_expression '|' exclusive_or_expression
external_declaration -> function_definition | declaration
direct_abstract_declarator -> '(' abstract_declarator ')' | [ ] | [ '*' ] | [ static type_qualifier_list assignment_expression ] | [ static assignment_expression ] | [ type_qualifier_list static assignment_expression ] | [ type_qualifier_list assignment_expression ] | [ type_qualifier_list ] | [ assignment_expression ] | direct_abstract_declarator [ ] | direct_abstract_declarator [ '*' ] | direct_abstract_declarator [ static type_qualifier_list assignment_expression ] | direct_abstract_declarator [ static assignment_expression ] | direct_abstract_declarator [ type_qualifier_list assignment_expression ] | direct_abstract_declarator [ type_qualifier_list static assignment_expression ] | direct_abstract_declarator [ type_qualifier_list ] | direct_abstract_declarator [ assignment_expression ] | '(' ')' | '(' parameter_type_list ')' | direct_abstract_declarator '(' ')' | direct_abstract_declarator '(' parameter_type_list ')'
multiplicative_expression -> cast_expression | multiplicative_expression '*' cast_expression | multiplicative_expression / cast_expression | multiplicative_expression % cast_expression
assignment_operator -> = | '*=' | /= | %= | '+=' | -= | <<= | >>= | &= | ^= | '|='
init_declarator_list -> init_declarator | init_declarator_list , init_declarator
jump_statement -> goto Identifier ; | continue ; | break ; | return ; | return expression ;
expression_statement -> ; | expression ;
pointer -> '*' type_qualifier_list pointer | '*' type_qualifier_list | '*' pointer | '*'
direct_declarator -> Identifier | '(' declarator ')' | direct_declarator [ ] | direct_declarator [ '*' ] | direct_declarator [ static type_qualifier_list assignment_expression ] | direct_declarator [ static assignment_expression ] | direct_declarator [ type_qualifier_list '*' ] | direct_declarator [ type_qualifier_list static assignment_expression ] | direct_declarator [ type_qualifier_list assignment_expression ] | direct_declarator [ type_qualifier_list ] | direct_declarator [ assignment_expression ] | direct_declarator '(' parameter_type_list ')' | direct_declarator '(' ')' | direct_declarator '(' identifier_list ')'
initializer_list -> designation initializer | initializer | initializer_list , designation initializer | initializer_list , initializer
specifier_qualifier_list -> type_specifier specifier_qualifier_list | type_specifier | type_qualifier specifier_qualifier_list | type_qualifier
statement -> labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement
function_specifier -> inline | _Noreturn
unary_expression -> postfix_expression | '++' unary_expression | -- unary_expression | unary_operator cast_expression | sizeof unary_expression | sizeof '(' type_name ')' | _Alignof '(' type_name ')'
generic_selection -> _Generic '(' assignment_expression , generic_assoc_list ')'
abstract_declarator -> pointer direct_abstract_declarator | pointer | direct_abstract_declarator
generic_assoc_list -> generic_association | generic_assoc_list , generic_association
compound_statement -> { } | { block_item_list }
primary_expression -> Identifier | Constant | StringLiteral | '(' expression ')' | generic_selection
alignment_specifier -> _Alignas '(' type_name ')' | _Alignas '(' constant_expression ')'
exclusive_or_expression -> and_expression | exclusive_or_expression ^ and_expression
struct_or_union_specifier -> struct_or_union { struct_declaration_list } | struct_or_union Identifier { struct_declaration_list } | struct_or_union Identifier
argument_expression_list -> assignment_expression | argument_expression_list , assignment_expression
block_item -> declaration | statement
block_item_list -> block_item | block_item_list block_item
storage_class_specifier -> typedef | extern | static | _Thread_local | auto | register
conditional_expression -> logical_or_expression | logical_or_expression '?' expression : conditional_expression
struct_declaration -> specifier_qualifier_list ; | specifier_qualifier_list struct_declarator_list ; | StaticAssertDeclaration
parameter_declaration -> declaration_specifiers declarator | declaration_specifiers abstract_declarator | declaration_specifiers
additive_expression -> multiplicative_expression | additive_expression '+' multiplicative_expression | additive_expression - multiplicative_expression
selection_statement -> if '(' expression ')' statement else statement | if '(' expression ')' statement | switch '(' expression ')' statement
constant_expression -> conditional_expression
unary_operator -> & | '*' | '+' | - | ~ | !
declarator -> pointer direct_declarator | direct_declarator
and_expression -> equality_expression | and_expression & equality_expression
type_qualifier_list -> type_qualifier | type_qualifier_list type_qualifier
enumerator -> enumeration_constant = constant_expression | enumeration_constant
expression -> assignment_expression | expression , assignment_expression
atomic_type_specifier -> _Atomic '(' type_name ')'
parameter_list -> parameter_declaration | parameter_list , parameter_declaration
struct_declarator_list -> struct_declarator | struct_declarator_list , struct_declarator
equality_expression -> relational_expression | equality_expression == relational_expression | equality_expression != relational_expression
struct_declaration_list -> struct_declaration | struct_declaration_list struct_declaration
assignment_expression -> conditional_expression | unary_expression assignment_operator assignment_expression
labeled_statement -> Identifier : statement | case constant_expression : statement | default : statement
logical_or_expression -> logical_and_expression | logical_or_expression '||' logical_and_expression
declaration -> declaration_specifiers ; | declaration_specifiers init_declarator_list ; | StaticAssertDeclaration
postfix_expression -> primary_expression | postfix_expression [ expression ] | postfix_expression '(' ')' | postfix_expression '(' argument_expression_list ')' | postfix_expression . Identifier | postfix_expression -> Identifier | postfix_expression '++' | postfix_expression -- | '(' type_name ')' { initializer_list } | '(' type_name ')' { initializer_list , }
initializer -> { initializer_list } | { initializer_list , } | assignment_expression
