program -> opt1
propertyAssignment -> propertyName : singleExpression | getter '(' ')' { functionBody } | setter '(' propertySetParameterList ')' { functionBody }
elementList -> opt22 singleExpression star3
BooleanLiteral -> true | false
opt11 -> "" | Identifier
statement -> block | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement
or4 -> < | > | <= | >=
expressionStatement -> expressionSequence
Return -> return
keyword -> Break | Do | Instanceof | Typeof | Case | Else | New | Var | Catch | Finally | Return | Void | Continue | For | Switch | While | Function | This | With | Default | If | Throw | Delete | In | Try
Else -> else
expressionSequence -> singleExpression star6
Continue -> continue
breakStatement -> Break opt11
arguments -> '(' opt26 ')'
literal -> NullLiteral | BooleanLiteral | StringLiteral | RegularExpression | numericLiteral
tryStatement -> Try block catchProduction | Try block finallyProduction | Try block catchProduction finallyProduction
opt20 -> "" | ,
Finally -> finally
opt10 -> "" | Identifier
opt5 -> "" | expressionSequence
propertySetParameterList -> Identifier
opt27 -> "" | Identifier
opt15 -> ""
Try -> try
opt2 -> "" | statementList
opt24 -> "" | propertyNameAndValueList
functionDeclaration -> Function Identifier '(' opt17 ')' { functionBody }
or5 -> == | != | === | !==
caseBlock -> { opt13 opt14 }
arrayLiteral -> [ opt19 opt20 opt21 ]
opt14 -> "" | defaultClause opt15
variableDeclaration -> Identifier opt3
If -> if
initialiser -> = singleExpression
opt21 -> "" | elision
objectLiteral -> { opt24 opt25 }
opt17 -> "" | formalParameterList
This -> this
emptyStatement -> ;
NullLiteral -> null
numericLiteral -> Number
Typeof -> typeof
opt18 -> "" | sourceElements
Catch -> catch
opt6 -> "" | expressionSequence
reservedWord -> keyword | NullLiteral | BooleanLiteral
continueStatement -> Continue opt10
Throw -> throw
star4 -> "" | , propertyAssignment star4
setter -> Identifier
or1 -> '*' | / | %
sourceElements -> plus1
plus1 -> sourceElement | sourceElement plus1
For -> for
defaultClause -> Default : opt16
labelledStatement -> Identifier : statement
While -> while
Switch -> switch
New -> new
opt1 -> "" | sourceElements
variableDeclarationList -> variableDeclaration star1
Default -> default
iterationStatement -> Do statement While '(' expressionSequence ')' | While '(' expressionSequence ')' statement | For '(' opt5 ; opt6 ; opt7 ')' statement | For '(' Var variableDeclarationList ; opt8 ; opt9 ')' statement | For '(' singleExpression In expressionSequence ')' statement | For '(' Var variableDeclaration In expressionSequence ')' statement
Break -> break
opt26 -> "" | argumentList
opt13 -> ""
formalParameterList -> Identifier star2
opt22 -> "" | elision
finallyProduction -> Finally block
block -> { opt2 }
or2 -> '+' | -
star1 -> "" | , variableDeclaration star1
propertyName -> identifierName | StringLiteral | numericLiteral
opt7 -> "" | expressionSequence
elision -> plus3
star6 -> "" | , singleExpression star6
assignmentOperator -> '*=' | /= | %= | '+=' | -= | <<= | >>= | >>>= | &= | ^= | '|='
StringLiteral -> String
opt16 -> "" | statementList
star2 -> "" | , Identifier star2
opt28 -> "" | formalParameterList
singleExpression -> Function opt27 '(' opt28 ')' { functionBody } | singleExpression [ expressionSequence ] | singleExpression . identifierName | singleExpression arguments | New singleExpression opt29 | singleExpression '++' | singleExpression -- | Delete singleExpression | Void singleExpression | Typeof singleExpression | '++' singleExpression | -- singleExpression | '+' singleExpression | - singleExpression | ~ singleExpression | ! singleExpression | singleExpression or1 singleExpression | singleExpression or2 singleExpression | singleExpression or3 singleExpression | singleExpression or4 singleExpression | singleExpression Instanceof singleExpression | singleExpression In singleExpression | singleExpression or5 singleExpression | singleExpression & singleExpression | singleExpression ^ singleExpression | singleExpression '|' singleExpression | singleExpression && singleExpression | singleExpression '||' singleExpression | singleExpression '?' singleExpression : singleExpression | singleExpression = expressionSequence | singleExpression assignmentOperator expressionSequence | This | Identifier | literal | arrayLiteral | objectLiteral | '(' expressionSequence ')'
opt3 -> "" | initialiser
argumentList -> singleExpression star5
Void -> void
switchStatement -> Switch '(' expressionSequence ')' caseBlock
withStatement -> With '(' expressionSequence ')' statement
ifStatement -> If '(' expressionSequence ')' statement opt4
Instanceof -> instanceof
Do -> do
opt23 -> "" | elision
propertyNameAndValueList -> propertyAssignment star4
opt12 -> "" | expressionSequence
getter -> Identifier
Var -> var
statementList -> plus2
variableStatement -> Var variableDeclarationList
catchProduction -> Catch '(' Identifier ')' block
With -> with
opt25 -> "" | ,
or3 -> << | >> | >>>
plus2 -> statement | statement plus2
functionBody -> opt18
opt8 -> "" | expressionSequence
In -> in
throwStatement -> Throw expressionSequence
opt4 -> "" | Else statement
identifierName -> Identifier | reservedWord
star5 -> "" | , singleExpression star5
opt29 -> "" | arguments
sourceElement -> statement | functionDeclaration
Function -> function
returnStatement -> Return opt12
Case -> case
opt19 -> "" | elementList
Delete -> delete
opt9 -> "" | expressionSequence
plus3 -> , | , plus3
star3 -> "" | , opt23 singleExpression star3
